name: Django CI

on:
  push:
    branches: [ "main", "feature/*" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 2
      matrix:
        python-version: [3.13, 3.12]

    services:
      # Add SQLite service as database backend
      sqlite:
        image: nouchka/sqlite3:latest
        ports:
          - 5432:5432

    env:
      DJANGO_SECRET_KEY: 'github-actions-test-key-not-for-production'
      DJANGO_DEBUG: 'True'
      DJANGO_ALLOWED_HOSTS: 'localhost,127.0.0.1'
      DJANGO_SETTINGS_MODULE: 'core.settings'

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Set PYTHONPATH
      run: |
        echo "PYTHONPATH=$PYTHONPATH:$(pwd)" >> $GITHUB_ENV
        echo "Setting PYTHONPATH to include $(pwd)"
    
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest pytest-django
        pip install -r requirements.txt
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run Django Migrations
      run: |
        # Run migrations to set up the database for tests
        echo "Running migrations with explicit settings module..."
        # List all apps with migrations that need to be run
        PYTHONPATH=$(pwd):$PYTHONPATH python manage.py showmigrations
        
        # Run migrations for all apps
        echo "Running migrations for all apps..."
        PYTHONPATH=$(pwd):$PYTHONPATH python manage.py migrate --no-input
        
        # Explicitly run migrations for catalog and applications apps to ensure they're applied
        echo "Ensuring catalog app migrations are applied..."
        PYTHONPATH=$(pwd):$PYTHONPATH python manage.py migrate catalog --no-input
        
        echo "Ensuring applications app migrations are applied..."
        PYTHONPATH=$(pwd):$PYTHONPATH python manage.py migrate applications --no-input
        
        # Verify migrations were applied
        echo "Verifying migrations were applied..."
        PYTHONPATH=$(pwd):$PYTHONPATH python manage.py showmigrations
        
        # Make diagnostic script executable
        chmod +x scripts/diagnose_db.py
        
        # Run database diagnostic script
        echo "Running database diagnostic checks..."
        # Add the current directory to PYTHONPATH explicitly for this command
        PYTHONPATH=$(pwd):$PYTHONPATH python scripts/diagnose_db.py
        
        # Verify the specific tables exist
        echo "Verifying specific tables exist in the database..."
        PYTHONPATH=$(pwd):$PYTHONPATH python -c '
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "core.settings")
django.setup()
from django.db import connection
cursor = connection.cursor()
tables_to_check = ["catalog_institution", "applications_application"]
for table in tables_to_check:
    cursor.execute(f"SELECT name FROM sqlite_master WHERE type=\'table\' AND name=\'{table}\';")
    result = cursor.fetchone()
    if result:
        print(f"✅ Table {table} exists")
    else:
        print(f"❌ Table {table} does NOT exist")
        sys.exit(1)
print("All required tables exist!")
'

    - name: Run Tests
      run: |
        # Verify environment before running tests
        echo "Python version:"
        python --version
        echo "Django version:"
        python -c "import django; print(django.get_version())"
        echo "Python path:"
        python -c "import sys; print('PYTHONPATH:', sys.path)"
        echo "Current directory:"
        pwd
        echo "Directory contents:"
        ls -la
        
        # Try to import the core module to verify it's accessible
        echo "Verifying core module can be imported:"
        PYTHONPATH=$(pwd):$PYTHONPATH python -c "import core; print('Successfully imported core module')"
        
        # Verify catalog and applications can be imported
        echo "Verifying catalog and applications modules can be imported:"
        PYTHONPATH=$(pwd):$PYTHONPATH python -c "import catalog; import applications; print('Successfully imported catalog and applications modules')"
        
        # Verify database is ready for tests
        echo "Verifying database schema is ready for tests:"
        PYTHONPATH=$(pwd):$PYTHONPATH python -c '
import os, sys, django
sys.path.insert(0, os.getcwd())
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "core.settings")
django.setup()
from django.db import connection
cursor = connection.cursor()
cursor.execute("SELECT name FROM sqlite_master WHERE type=\'table\';")
tables = cursor.fetchall()
print(f"Database contains {len(tables)} tables:")
for table in tables:
    print(f"- {table[0]}")
'
        
        # Run pytest with Django settings module configured and explicit PYTHONPATH
        # Add --create-db flag to ensure pytest-django creates a fresh test database
        PYTHONPATH=$(pwd):$PYTHONPATH python -m pytest -v

  deploy:
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
    
    - name: Install deployment dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel
    
    - name: Build artifact
      run: |
        # Create a deployment package
        mkdir -p deploy
        cp -r applications accounts catalog core manage.py requirements.txt deploy/
        cd deploy && zip -r ../career-campass-deploy.zip .
    
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: django-app
        path: career-campass-deploy.zip
        retention-days: 5
        
    # This step would be customized based on your actual deployment target
    - name: Deploy
      run: |
        echo "Deploying application to server..."
        # Add your deployment commands here
        # For example: rsync, scp, or calls to cloud provider APIs
